/**
 * @fileoverview Firestore Security Rules for VÃ­a Hogar Portal
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a path-based ownership model,
 * emphasizing authorization independence and structural segregation for optimal security and performance.
 * No `get()` calls are used in rules to avoid performance bottlenecks.
 *
 * Data Structure:
 * - Properties: Top-level collection containing property details.
 * - PageSections: Subcollection under each property, representing modular page sections.
 * - ContactSubmissions: Subcollection under each property, storing contact form submissions.
 * - [SectionData]: Top-level collections for various section data entities (HeroSectionData, GallerySectionData, etc.).
 * - [RelatedData]: Top-level collections for entities related to Sections (DraggableTextData, Features, NearbyPlaces, Amenities, Tiers, FeatureTiers).
 *
 * Key Security Decisions:
 * - Contact submissions are nested under their respective property documents.
 * - List operations are secured by default, with collections containing only accessible documents.
 * - Write access to Property and its subcollections is not explicitly defined, defaulting to `false`, which blocks all write access.
 *
 * Denormalization for Authorization:
 * - The `contactSubmissions` subcollection under `/properties/{propertyId}` implicitly links submissions to properties, enabling authorization based on the parent property.
 *
 * Structural Segregation:
 * - Different section data types (HeroSectionData, GallerySectionData, etc.) are stored in separate top-level collections to simplify querying and avoid complex type-checking in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures Property documents.
     * @path /properties/{propertyId}
     * @allow (get, list): Public access to property data.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to property listings.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures PageSection documents nested under a Property.
     * @path /properties/{propertyId}/pageSections/{pageSectionId}
     * @allow (get, list): Public access to page section data.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to page sections.
     */
    match /properties/{propertyId}/pageSections/{pageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures ContactSubmission documents nested under a Property.
     * @path /properties/{propertyId}/contactSubmissions/{contactSubmissionId}
     * @allow (get, list): Public read access to contact submissions.
     * @deny (create, update, delete): No write access allowed.
     * @principle Restricts contact submissions to be read-only.
     */
    match /properties/{propertyId}/contactSubmissions/{contactSubmissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures HeroSectionData documents.
     * @path /heroSectionData/{heroSectionDataId}
     * @allow (get, list): Public read access to HeroSectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to hero section data.
     */
    match /heroSectionData/{heroSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures DraggableTextData documents.
     * @path /draggableTextData/{draggableTextDataId}
     * @allow (get, list): Public read access to DraggableTextData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to draggable text data.
     */
    match /draggableTextData/{draggableTextDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures ImageWithFeaturesSectionData documents.
     * @path /imageWithFeaturesSectionData/{imageWithFeaturesSectionDataId}
     * @allow (get, list): Public read access to ImageWithFeaturesSectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to image with features section data.
     */
    match /imageWithFeaturesSectionData/{imageWithFeaturesSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures Feature documents.
     * @path /features/{featureId}
     * @allow (get, list): Public read access to Feature.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to feature data.
     */
    match /features/{featureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures GallerySectionData documents.
     * @path /gallerySectionData/{gallerySectionDataId}
     * @allow (get, list): Public read access to GallerySectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to gallery section data.
     */
    match /gallerySectionData/{gallerySectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures LocationSectionData documents.
     * @path /locationSectionData/{locationSectionDataId}
     * @allow (get, list): Public read access to LocationSectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to location section data.
     */
    match /locationSectionData/{locationSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures NearbyPlace documents.
     * @path /nearbyPlaces/{nearbyPlaceId}
     * @allow (get, list): Public read access to NearbyPlace.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to nearby place data.
     */
    match /nearbyPlaces/{nearbyPlaceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures AmenitiesSectionData documents.
     * @path /amenitiesSectionData/{amenitiesSectionDataId}
     * @allow (get, list): Public read access to AmenitiesSectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to amenities section data.
     */
    match /amenitiesSectionData/{amenitiesSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures Amenity documents.
     * @path /amenities/{amenityId}
     * @allow (get, list): Public read access to Amenity.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to amenity data.
     */
    match /amenities/{amenityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures PricingSectionData documents.
     * @path /pricingSectionData/{pricingSectionDataId}
     * @allow (get, list): Public read access to PricingSectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to pricing section data.
     */
    match /pricingSectionData/{pricingSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures Tier documents.
     * @path /tiers/{tierId}
     * @allow (get, list): Public read access to Tier.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to tier data.
     */
    match /tiers/{tierId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures FeatureTier documents.
     * @path /featureTiers/{featureTierId}
     * @allow (get, list): Public read access to FeatureTier.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to feature tier data.
     */
    match /featureTiers/{featureTierId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures ContactSectionData documents.
     * @path /contactSectionData/{contactSectionDataId}
     * @allow (get, list): Public read access to ContactSectionData.
     * @deny (create, update, delete): No write access allowed.
     * @principle Enforces read-only access to contact section data.
     */
    match /contactSectionData/{contactSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}