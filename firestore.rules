/**
 * @fileoverview Firestore Security Rules for VÃ­a Hogar.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and simplicity by using path-based authorization.
 * Each data type (Property, PageSection, ContactSubmission, etc.) is stored in a dedicated collection.
 * This allows us to avoid complex queries within the rules and ensures list operations are secure by default.
 *
 * Data Structure:
 * - /properties/{propertyId}: Contains property details.
 * - /properties/{propertyId}/pageSections/{pageSectionId}: Contains modular page sections for a property.
 * - /properties/{propertyId}/contactSubmissions/{contactSubmissionId}: Contains contact submissions for a property.
 * - /heroSectionData/{heroSectionDataId}, /draggableTextData/{draggableTextDataId}, etc.: Contain data for individual page section components.
 *
 * Key Security Decisions:
 * - All data access is authenticated (anonymous access is enabled via auth).
 * - Listing of Property and Section data is public.
 * - ContactSubmissions are scoped to the owning Property.
 * - There are no global admin roles; access is managed through data ownership and relationships.
 *
 * Denormalization for Authorization:
 * - ContactSubmissions are nested under Properties to avoid needing `get()` calls to verify the property relationship.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to properties, but restricts creation, updates, and deletes to authenticated users.
     * @path /properties/{propertyId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to page sections, but restricts creation, updates, and deletes to authenticated users.
     * @path /properties/{propertyId}/pageSections/{pageSectionId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /properties/{propertyId}/pageSections/{pageSectionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete contact submissions for a specific property.
     * @path /properties/{propertyId}/contactSubmissions/{contactSubmissionId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if !isSignedIn();
     * @deny list: if !isSignedIn();
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Enforces user authentication for all contact submission operations.
     */
    match /properties/{propertyId}/contactSubmissions/{contactSubmissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to hero section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /heroSectionData/{heroSectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /heroSectionData/{heroSectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to draggable text data, but restricts creation, updates, and deletes to authenticated users.
     * @path /draggableTextData/{draggableTextDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /draggableTextData/{draggableTextDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to image with features section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /imageWithFeaturesSectionData/{imageWithFeaturesSectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /imageWithFeaturesSectionData/{imageWithFeaturesSectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to features, but restricts creation, updates, and deletes to authenticated users.
     * @path /features/{featureId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /features/{featureId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to gallery section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /gallerySectionData/{gallerySectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /gallerySectionData/{gallerySectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to location section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /locationSectionData/{locationSectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /locationSectionData/{locationSectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to nearby places, but restricts creation, updates, and deletes to authenticated users.
     * @path /nearbyPlaces/{nearbyPlaceId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /nearbyPlaces/{nearbyPlaceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to amenities section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /amenitiesSectionData/{amenitiesSectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /amenitiesSectionData/{amenitiesSectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to amenities, but restricts creation, updates, and deletes to authenticated users.
     * @path /amenities/{amenityId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /amenities/{amenityId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to pricing section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /pricingSectionData/{pricingSectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /pricingSectionData/{pricingSectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to tiers, but restricts creation, updates, and deletes to authenticated users.
     * @path /tiers/{tierId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /tiers/{tierId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to feature tiers, but restricts creation, updates, and deletes to authenticated users.
     * @path /featureTiers/{featureTierId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /featureTiers/{featureTierId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to contact section data, but restricts creation, updates, and deletes to authenticated users.
     * @path /contactSectionData/{contactSectionDataId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if !isSignedIn();
     * @deny update: if !isSignedIn();
     * @deny delete: if !isSignedIn();
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /contactSectionData/{contactSectionDataId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Helper function to determine if a user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}