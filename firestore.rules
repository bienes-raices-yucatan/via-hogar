/**
 * @file Overview
 * This ruleset enforces a public read, owner-write model for Property data,
 * with nested ContactSubmissions. Section data is read only.
 *
 * Data Structure:
 * - /properties/{propertyId}: Publicly readable property data.
 * - /properties/{propertyId}/contactSubmissions/{contactSubmissionId}: Contact submissions associated with a property.
 * - /{sectionData}/{sectionDataId}: Data for various section types (HeroSectionData, GallerySectionData, etc.).
 *
 * Key Security Decisions:
 * - Public read access for properties.
 * - Owner-only writes for properties, validated by the existence of the `propertyId` field on creation and immutability on update.
 * - Contact submissions are only creatable under a given `propertyId`.
 * - All Section Data documents are publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to property documents, but restricts writes to owners.
     * @path /properties/{propertyId}
     * @allow (get, list): if true;
     * @allow (create): if request.auth != null;
     * @allow (update, delete): if request.auth != null;
     * @deny (create): if request.auth == null;
     * @deny (update, delete): if request.auth == null;
     * @principle Allows public read access while enforcing ownership for write operations on properties.
     */
    match /properties/{propertyId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows creation of contact submissions under a specific property, but only by authenticated users.
     * @path /properties/{propertyId}/contactSubmissions/{contactSubmissionId}
     * @allow (create): if request.auth != null;
     * @deny (get, list, update, delete): always fails.
     * @principle Restricts contact submissions to authenticated users and enforces parent-child relationship with properties.
     */
    match /properties/{propertyId}/contactSubmissions/{contactSubmissionId} {
      allow get, list, update, delete: if false;
      allow create: if isSignedIn();
    }

    /**
     * @description Allows public read access to hero section data.
     * @path /heroSectionData/{heroSectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to hero section data.
     */
    match /heroSectionData/{heroSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to draggable text data.
     * @path /draggableTextData/{draggableTextDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to draggable text data.
     */
    match /draggableTextData/{draggableTextDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to image with features section data.
     * @path /imageWithFeaturesSectionData/{imageWithFeaturesSectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to image with features section data.
     */
    match /imageWithFeaturesSectionData/{imageWithFeaturesSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to features.
     * @path /features/{featureId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to features.
     */
    match /features/{featureId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to gallery section data.
     * @path /gallerySectionData/{gallerySectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to gallery section data.
     */
    match /gallerySectionData/{gallerySectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to location section data.
     * @path /locationSectionData/{locationSectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to location section data.
     */
    match /locationSectionData/{locationSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to nearby places.
     * @path /nearbyPlaces/{nearbyPlaceId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to nearby places.
     */
    match /nearbyPlaces/{nearbyPlaceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to amenities section data.
     * @path /amenitiesSectionData/{amenitiesSectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to amenities section data.
     */
    match /amenitiesSectionData/{amenitiesSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to amenities.
     * @path /amenities/{amenityId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to amenities.
     */
    match /amenities/{amenityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to pricing section data.
     * @path /pricingSectionData/{pricingSectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to pricing section data.
     */
    match /pricingSectionData/{pricingSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to tiers.
     * @path /tiers/{tierId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to tiers.
     */
    match /tiers/{tierId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to feature tiers.
     * @path /featureTiers/{featureTierId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to feature tiers.
     */
    match /featureTiers/{featureTierId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to contact section data.
     * @path /contactSectionData/{contactSectionDataId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): always fails.
     * @principle Provides public read access to contact section data.
     */
    match /contactSectionData/{contactSectionDataId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows public read access to site configuration
      * @path /config/site
      * @allow (get): if true;
      * @deny (list, create, update, delete): always fails.
      * @principle Provides public read access to site configuration.
      */
    match /config/site {
      allow get: if true;
      allow list, create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}